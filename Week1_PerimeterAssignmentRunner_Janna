import edu.duke.*;
import java.io.File;

public class PerimeterAssignmentRunner {
    public double getPerimeter (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        // For each point named currPt in the shape s,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        // totalPerim is the answer
        return totalPerim;
    }

    public int getNumPoints (Shape s) {
        // Complete writing the method that has one parameter s that is of type Shape. This method returns an integer that is the number of points in Shape s. 
        int totalpoints = 0;
        // For each point currPt in the shape s,
        for (Point currPt : s.getPoints()) {
            // Add 1 to totalpoints initialized at 0
            totalpoints = totalpoints + 1;
        }
        // totalPoints is the answer
        return totalpoints;
    }


    public double getAverageLength(Shape s) {
        // getAverageLength has one parameter s that is of type Shape. This method returns a number of type double that is the calculated average of all sides' lengths in the Shape S
        double totalpt = Double.valueOf(getNumPoints(s));//second way  
        double avglength = getPerimeter(s)/totalpt;
        return avglength;
    }

    public double getLargestSide(Shape s) {
        Point prevPt = s.getLastPoint();
        double currDist = 0;
        double largestSide = 0;
        //For each point currPt in the shape s, 
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            currDist = prevPt.distance(currPt);
            if(currDist > largestSide) {
                largestSide = currDist;
            }
         
            //System.out.println(currDist);
            prevPt = currPt;
            
        }
         
        // totalPerim is the answer
        return largestSide;
        }

    public double getLargestX(Shape s) {
        //method getLargestX has one parameter s that is of type Shape. 
        //This method returns a number of type double that is the largest x value overa ll the points in the Shape s.
        Point prevPt = s.getLastPoint();
        //get the X coordinate of prevPt
        int prevPtX = prevPt.getX();
        //set largestX to be equal to prevPtX coordinate, and cast prevPtX as a double
        double largestX = (double) prevPtX;
       
        for (Point currPtX : s.getPoints()) {
            int currDistX = currPtX.getX();
            if (currDistX > largestX) {
            largestX = (double) currDistX;
            }
        }
    return largestX;
     }
    // This method creates a DirectoryResource (so you can select multiple files)
    //And then iterates over these files. 
    //For each File f, it converts the file into a FileResource with the line
    //FileResource fr = new FileResource(f);
    public double getLargestPerimeterMultipleFiles() {
        // Put code here
        double largestPerimeterall = 0;
        DirectoryResource dr = new DirectoryResource();
        FileResource largestfile = null;
            for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            Shape s = new Shape(fr);
            double shapePerim = getPerimeter(s);
            if (shapePerim>largestPerimeterall) {
                largestPerimeterall = shapePerim;
                
            }
        }
        
        return largestPerimeterall;
    }
    
    //Returns the file name with largest perimeter
    public String getFileWithLargestPerimeter() {
        //Create a file called temp, and assign value of null

        DirectoryResource dr = new DirectoryResource();
        double largestPerimeterall = 0;
        File largestFile = null;
     for (File f : dr.selectedFiles()) {
            FileResource file = new FileResource(f);
            Shape s = new Shape(file);
            double shapePerim = getPerimeter(s);
            if (shapePerim>largestPerimeterall) {
                largestPerimeterall = shapePerim;
                largestFile = f;
                //System.out.println("the filename of largestPerimeterall is"+ shapePerimname);
            }
    }
    return largestFile.getName();
    }
    //testPerimeter cases
    
    public void testPerimeter () {
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        double length = getPerimeter(s);
        int points = getNumPoints(s);
        double avglength = getAverageLength(s);
        double sideL = getLargestSide(s);
        double largestXvalue = getLargestX(s);
        
        System.out.println("perimeter = " + length);
        System.out.println("numpoints = " + points);
        System.out.println("avglength = " + avglength);
        System.out.println("sidelength = " + sideL);
        System.out.println("largestXvalue = " + largestXvalue);
        testPerimeterMultipleFiles();
        testFileWithLargestPerimeter();
    }
    
    //2. Finish writing the void method testPerimeterMultipleFiles to call getLargestPerimeterMultipleFiles 
    //and to print out the largest such perimeter. 
    //This method has no parameters and no return value. 
    //You will select the files when you run this method 
    public void testPerimeterMultipleFiles() {
        double largestPerimeterofallfiles = getLargestPerimeterMultipleFiles();
        System.out.println("largestPerimeterofallfiles =" + largestPerimeterofallfiles);
    }
    //prints the name of the file with the largest perimeter
    public void testFileWithLargestPerimeter() {
        // Put code here
        String largestPerimeterfilename = getFileWithLargestPerimeter();
        System.out.println("largest perimeter file name is " + largestPerimeterfilename);
    }

    // This method creates a triangle that you can use to test your other methods
    public void triangle(){
        Shape triangle = new Shape();
        triangle.addPoint(new Point(0,0));
        triangle.addPoint(new Point(6,0));
        triangle.addPoint(new Point(3,6));
        for (Point p : triangle.getPoints()){
            System.out.println(p);
        }
        double peri = getPerimeter(triangle);
        System.out.println("perimeter = "+peri);
    }

    // This method prints names of all files in a chosen folder 
    // that you can use to test your other methods
    public void printFileNames() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            System.out.println(f);
        }
    }

    public static void main (String[] args) {
        PerimeterAssignmentRunner pr = new PerimeterAssignmentRunner();
        pr.testPerimeter();
        pr.printFileNames();
    }
}
